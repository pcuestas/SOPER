
accion antigua:


accion:
    manejador: rutina de codigo que se ejecuta
    mascara: bloquea las señales especificadas
    flags: modifica el comportamiento. por defecto bloquear señales nuevas (se puede hacer lo contrario con SA_NODEFER)

las mascaras se modifican con sig____set. set-> un bit para cada señal (activada/desactivada)

establecer mascara con sigprocmask. (con SIG_BLOCK la mascara resultante es la union de al antigua y el nuevo set)

el manejador queda establecido a partir de sigaction();

NO SE PUEDEN CAPTURAR --> SIGKILL y SIGSTOP

kill(pid,señal); 




para destruir el semaforo hacer sem_close. Si hay segmentation fault el semaforo no se va a eliminar. Los semaforos no se destruyen al morir el procestablecido
sem_unlink cuando 0 procesos esten usando ese semaforo, el S.O. borrara el semaforo.

CUANDO LLAMAR A SEM_UNLINK? 
    - ecreo que hay que llamarlo después de sem_open si no queremos usarlo en más procesos 



PREGUNTAS


1) Por que nos falla en el ciclo 400 y no en el 1 si ponemos sigprocmask(TODAS) despues de los sigaction.

2) Merece la pena hacr una funcion kill_ 

3) Si durante manejador se recibe otra (que no esta bloqueada pq se esta ejecutanod el manejador), cuando el primer manejadro termine, se va a poder ejecutar el manejador despues de sigsuspend a pesar de que esa señal esta vloqueada. La señal la hemos recibido durante el manejdaro y se trata cuando esta bloqueada.

4) Solucionar punto 3 haciendo 3if en vez de if else es cutre?. Problemas?

5) ¿Es mejor hacer más manejadores con una instrucción?

CAMBIAR ORDEN DE FINALIZACIÓN(usr1<->term)
